// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v2.proto

#ifndef PROTOBUF_v2_2eproto__INCLUDED
#define PROTOBUF_v2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pMainLogic {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_v2_2eproto();
void protobuf_AssignDesc_v2_2eproto();
void protobuf_ShutdownFile_v2_2eproto();

class GetTitlesRequest;
class GetTitlesResponse;
class GetUrlByTitleRequest;
class GetUrlByTitleResponse;
class DownloadMP3Request;
class DownloadMP3Response;

// ===================================================================

class GetTitlesRequest : public ::google::protobuf::Message {
 public:
  GetTitlesRequest();
  virtual ~GetTitlesRequest();

  GetTitlesRequest(const GetTitlesRequest& from);

  inline GetTitlesRequest& operator=(const GetTitlesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTitlesRequest& default_instance();

  void Swap(GetTitlesRequest* other);

  // implements Message ----------------------------------------------

  GetTitlesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTitlesRequest& from);
  void MergeFrom(const GetTitlesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:pMainLogic.GetTitlesRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_v2_2eproto();
  friend void protobuf_AssignDesc_v2_2eproto();
  friend void protobuf_ShutdownFile_v2_2eproto();

  void InitAsDefaultInstance();
  static GetTitlesRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetTitlesResponse : public ::google::protobuf::Message {
 public:
  GetTitlesResponse();
  virtual ~GetTitlesResponse();

  GetTitlesResponse(const GetTitlesResponse& from);

  inline GetTitlesResponse& operator=(const GetTitlesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTitlesResponse& default_instance();

  void Swap(GetTitlesResponse* other);

  // implements Message ----------------------------------------------

  GetTitlesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTitlesResponse& from);
  void MergeFrom(const GetTitlesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string titles = 1;
  inline int titles_size() const;
  inline void clear_titles();
  static const int kTitlesFieldNumber = 1;
  inline const ::std::string& titles(int index) const;
  inline ::std::string* mutable_titles(int index);
  inline void set_titles(int index, const ::std::string& value);
  inline void set_titles(int index, const char* value);
  inline void set_titles(int index, const char* value, size_t size);
  inline ::std::string* add_titles();
  inline void add_titles(const ::std::string& value);
  inline void add_titles(const char* value);
  inline void add_titles(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& titles() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_titles();

  // required int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:pMainLogic.GetTitlesResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> titles_;
  ::std::string* msg_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_v2_2eproto();
  friend void protobuf_AssignDesc_v2_2eproto();
  friend void protobuf_ShutdownFile_v2_2eproto();

  void InitAsDefaultInstance();
  static GetTitlesResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetUrlByTitleRequest : public ::google::protobuf::Message {
 public:
  GetUrlByTitleRequest();
  virtual ~GetUrlByTitleRequest();

  GetUrlByTitleRequest(const GetUrlByTitleRequest& from);

  inline GetUrlByTitleRequest& operator=(const GetUrlByTitleRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetUrlByTitleRequest& default_instance();

  void Swap(GetUrlByTitleRequest* other);

  // implements Message ----------------------------------------------

  GetUrlByTitleRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetUrlByTitleRequest& from);
  void MergeFrom(const GetUrlByTitleRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:pMainLogic.GetUrlByTitleRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_title();
  inline void clear_has_title();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  ::std::string* title_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_v2_2eproto();
  friend void protobuf_AssignDesc_v2_2eproto();
  friend void protobuf_ShutdownFile_v2_2eproto();

  void InitAsDefaultInstance();
  static GetUrlByTitleRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetUrlByTitleResponse : public ::google::protobuf::Message {
 public:
  GetUrlByTitleResponse();
  virtual ~GetUrlByTitleResponse();

  GetUrlByTitleResponse(const GetUrlByTitleResponse& from);

  inline GetUrlByTitleResponse& operator=(const GetUrlByTitleResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetUrlByTitleResponse& default_instance();

  void Swap(GetUrlByTitleResponse* other);

  // implements Message ----------------------------------------------

  GetUrlByTitleResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetUrlByTitleResponse& from);
  void MergeFrom(const GetUrlByTitleResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // required int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:pMainLogic.GetUrlByTitleResponse)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::std::string* msg_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_v2_2eproto();
  friend void protobuf_AssignDesc_v2_2eproto();
  friend void protobuf_ShutdownFile_v2_2eproto();

  void InitAsDefaultInstance();
  static GetUrlByTitleResponse* default_instance_;
};
// -------------------------------------------------------------------

class DownloadMP3Request : public ::google::protobuf::Message {
 public:
  DownloadMP3Request();
  virtual ~DownloadMP3Request();

  DownloadMP3Request(const DownloadMP3Request& from);

  inline DownloadMP3Request& operator=(const DownloadMP3Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadMP3Request& default_instance();

  void Swap(DownloadMP3Request* other);

  // implements Message ----------------------------------------------

  DownloadMP3Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadMP3Request& from);
  void MergeFrom(const DownloadMP3Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:pMainLogic.DownloadMP3Request)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_title();
  inline void clear_has_title();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  ::std::string* title_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_v2_2eproto();
  friend void protobuf_AssignDesc_v2_2eproto();
  friend void protobuf_ShutdownFile_v2_2eproto();

  void InitAsDefaultInstance();
  static DownloadMP3Request* default_instance_;
};
// -------------------------------------------------------------------

class DownloadMP3Response : public ::google::protobuf::Message {
 public:
  DownloadMP3Response();
  virtual ~DownloadMP3Response();

  DownloadMP3Response(const DownloadMP3Response& from);

  inline DownloadMP3Response& operator=(const DownloadMP3Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadMP3Response& default_instance();

  void Swap(DownloadMP3Response* other);

  // implements Message ----------------------------------------------

  DownloadMP3Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadMP3Response& from);
  void MergeFrom(const DownloadMP3Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional int32 file_len = 3;
  inline bool has_file_len() const;
  inline void clear_file_len();
  static const int kFileLenFieldNumber = 3;
  inline ::google::protobuf::int32 file_len() const;
  inline void set_file_len(::google::protobuf::int32 value);

  // optional bytes file_content = 4;
  inline bool has_file_content() const;
  inline void clear_file_content();
  static const int kFileContentFieldNumber = 4;
  inline const ::std::string& file_content() const;
  inline void set_file_content(const ::std::string& value);
  inline void set_file_content(const char* value);
  inline void set_file_content(const void* value, size_t size);
  inline ::std::string* mutable_file_content();
  inline ::std::string* release_file_content();
  inline void set_allocated_file_content(::std::string* file_content);

  // @@protoc_insertion_point(class_scope:pMainLogic.DownloadMP3Response)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_file_len();
  inline void clear_has_file_len();
  inline void set_has_file_content();
  inline void clear_has_file_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 file_len_;
  ::std::string* file_content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_v2_2eproto();
  friend void protobuf_AssignDesc_v2_2eproto();
  friend void protobuf_ShutdownFile_v2_2eproto();

  void InitAsDefaultInstance();
  static DownloadMP3Response* default_instance_;
};
// ===================================================================

class MainLogicService_Stub;

class MainLogicService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MainLogicService() {};
 public:
  virtual ~MainLogicService();

  typedef MainLogicService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetTitles(::google::protobuf::RpcController* controller,
                       const ::pMainLogic::GetTitlesRequest* request,
                       ::pMainLogic::GetTitlesResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUrlByTitle(::google::protobuf::RpcController* controller,
                       const ::pMainLogic::GetUrlByTitleRequest* request,
                       ::pMainLogic::GetUrlByTitleResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DownloadMP3(::google::protobuf::RpcController* controller,
                       const ::pMainLogic::DownloadMP3Request* request,
                       ::pMainLogic::DownloadMP3Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MainLogicService);
};

class MainLogicService_Stub : public MainLogicService {
 public:
  MainLogicService_Stub(::google::protobuf::RpcChannel* channel);
  MainLogicService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~MainLogicService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements MainLogicService ------------------------------------------

  void GetTitles(::google::protobuf::RpcController* controller,
                       const ::pMainLogic::GetTitlesRequest* request,
                       ::pMainLogic::GetTitlesResponse* response,
                       ::google::protobuf::Closure* done);
  void GetUrlByTitle(::google::protobuf::RpcController* controller,
                       const ::pMainLogic::GetUrlByTitleRequest* request,
                       ::pMainLogic::GetUrlByTitleResponse* response,
                       ::google::protobuf::Closure* done);
  void DownloadMP3(::google::protobuf::RpcController* controller,
                       const ::pMainLogic::DownloadMP3Request* request,
                       ::pMainLogic::DownloadMP3Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MainLogicService_Stub);
};


// ===================================================================


// ===================================================================

// GetTitlesRequest

// required string type = 1;
inline bool GetTitlesRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTitlesRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTitlesRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTitlesRequest::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& GetTitlesRequest::type() const {
  return *type_;
}
inline void GetTitlesRequest::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void GetTitlesRequest::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void GetTitlesRequest::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTitlesRequest::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* GetTitlesRequest::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetTitlesRequest::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetTitlesResponse

// repeated string titles = 1;
inline int GetTitlesResponse::titles_size() const {
  return titles_.size();
}
inline void GetTitlesResponse::clear_titles() {
  titles_.Clear();
}
inline const ::std::string& GetTitlesResponse::titles(int index) const {
  return titles_.Get(index);
}
inline ::std::string* GetTitlesResponse::mutable_titles(int index) {
  return titles_.Mutable(index);
}
inline void GetTitlesResponse::set_titles(int index, const ::std::string& value) {
  titles_.Mutable(index)->assign(value);
}
inline void GetTitlesResponse::set_titles(int index, const char* value) {
  titles_.Mutable(index)->assign(value);
}
inline void GetTitlesResponse::set_titles(int index, const char* value, size_t size) {
  titles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTitlesResponse::add_titles() {
  return titles_.Add();
}
inline void GetTitlesResponse::add_titles(const ::std::string& value) {
  titles_.Add()->assign(value);
}
inline void GetTitlesResponse::add_titles(const char* value) {
  titles_.Add()->assign(value);
}
inline void GetTitlesResponse::add_titles(const char* value, size_t size) {
  titles_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetTitlesResponse::titles() const {
  return titles_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetTitlesResponse::mutable_titles() {
  return &titles_;
}

// required int32 status = 2;
inline bool GetTitlesResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTitlesResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTitlesResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTitlesResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 GetTitlesResponse::status() const {
  return status_;
}
inline void GetTitlesResponse::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required string msg = 3;
inline bool GetTitlesResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetTitlesResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetTitlesResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetTitlesResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& GetTitlesResponse::msg() const {
  return *msg_;
}
inline void GetTitlesResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void GetTitlesResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void GetTitlesResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTitlesResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* GetTitlesResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetTitlesResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetUrlByTitleRequest

// required string type = 1;
inline bool GetUrlByTitleRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetUrlByTitleRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetUrlByTitleRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetUrlByTitleRequest::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& GetUrlByTitleRequest::type() const {
  return *type_;
}
inline void GetUrlByTitleRequest::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void GetUrlByTitleRequest::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void GetUrlByTitleRequest::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetUrlByTitleRequest::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* GetUrlByTitleRequest::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetUrlByTitleRequest::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string title = 2;
inline bool GetUrlByTitleRequest::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetUrlByTitleRequest::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetUrlByTitleRequest::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetUrlByTitleRequest::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& GetUrlByTitleRequest::title() const {
  return *title_;
}
inline void GetUrlByTitleRequest::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void GetUrlByTitleRequest::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void GetUrlByTitleRequest::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetUrlByTitleRequest::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* GetUrlByTitleRequest::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetUrlByTitleRequest::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetUrlByTitleResponse

// optional string url = 1;
inline bool GetUrlByTitleResponse::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetUrlByTitleResponse::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetUrlByTitleResponse::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetUrlByTitleResponse::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& GetUrlByTitleResponse::url() const {
  return *url_;
}
inline void GetUrlByTitleResponse::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void GetUrlByTitleResponse::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void GetUrlByTitleResponse::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetUrlByTitleResponse::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* GetUrlByTitleResponse::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetUrlByTitleResponse::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 status = 2;
inline bool GetUrlByTitleResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetUrlByTitleResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetUrlByTitleResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetUrlByTitleResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 GetUrlByTitleResponse::status() const {
  return status_;
}
inline void GetUrlByTitleResponse::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required string msg = 3;
inline bool GetUrlByTitleResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetUrlByTitleResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetUrlByTitleResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetUrlByTitleResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& GetUrlByTitleResponse::msg() const {
  return *msg_;
}
inline void GetUrlByTitleResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void GetUrlByTitleResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void GetUrlByTitleResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetUrlByTitleResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* GetUrlByTitleResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetUrlByTitleResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DownloadMP3Request

// required string type = 1;
inline bool DownloadMP3Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadMP3Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadMP3Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadMP3Request::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& DownloadMP3Request::type() const {
  return *type_;
}
inline void DownloadMP3Request::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void DownloadMP3Request::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void DownloadMP3Request::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadMP3Request::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* DownloadMP3Request::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DownloadMP3Request::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string title = 2;
inline bool DownloadMP3Request::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadMP3Request::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadMP3Request::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadMP3Request::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& DownloadMP3Request::title() const {
  return *title_;
}
inline void DownloadMP3Request::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void DownloadMP3Request::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void DownloadMP3Request::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadMP3Request::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* DownloadMP3Request::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DownloadMP3Request::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DownloadMP3Response

// required int32 status = 1;
inline bool DownloadMP3Response::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadMP3Response::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadMP3Response::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadMP3Response::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 DownloadMP3Response::status() const {
  return status_;
}
inline void DownloadMP3Response::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required string msg = 2;
inline bool DownloadMP3Response::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadMP3Response::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadMP3Response::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadMP3Response::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& DownloadMP3Response::msg() const {
  return *msg_;
}
inline void DownloadMP3Response::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void DownloadMP3Response::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void DownloadMP3Response::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadMP3Response::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* DownloadMP3Response::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DownloadMP3Response::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 file_len = 3;
inline bool DownloadMP3Response::has_file_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadMP3Response::set_has_file_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadMP3Response::clear_has_file_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadMP3Response::clear_file_len() {
  file_len_ = 0;
  clear_has_file_len();
}
inline ::google::protobuf::int32 DownloadMP3Response::file_len() const {
  return file_len_;
}
inline void DownloadMP3Response::set_file_len(::google::protobuf::int32 value) {
  set_has_file_len();
  file_len_ = value;
}

// optional bytes file_content = 4;
inline bool DownloadMP3Response::has_file_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DownloadMP3Response::set_has_file_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DownloadMP3Response::clear_has_file_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DownloadMP3Response::clear_file_content() {
  if (file_content_ != &::google::protobuf::internal::kEmptyString) {
    file_content_->clear();
  }
  clear_has_file_content();
}
inline const ::std::string& DownloadMP3Response::file_content() const {
  return *file_content_;
}
inline void DownloadMP3Response::set_file_content(const ::std::string& value) {
  set_has_file_content();
  if (file_content_ == &::google::protobuf::internal::kEmptyString) {
    file_content_ = new ::std::string;
  }
  file_content_->assign(value);
}
inline void DownloadMP3Response::set_file_content(const char* value) {
  set_has_file_content();
  if (file_content_ == &::google::protobuf::internal::kEmptyString) {
    file_content_ = new ::std::string;
  }
  file_content_->assign(value);
}
inline void DownloadMP3Response::set_file_content(const void* value, size_t size) {
  set_has_file_content();
  if (file_content_ == &::google::protobuf::internal::kEmptyString) {
    file_content_ = new ::std::string;
  }
  file_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownloadMP3Response::mutable_file_content() {
  set_has_file_content();
  if (file_content_ == &::google::protobuf::internal::kEmptyString) {
    file_content_ = new ::std::string;
  }
  return file_content_;
}
inline ::std::string* DownloadMP3Response::release_file_content() {
  clear_has_file_content();
  if (file_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_content_;
    file_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DownloadMP3Response::set_allocated_file_content(::std::string* file_content) {
  if (file_content_ != &::google::protobuf::internal::kEmptyString) {
    delete file_content_;
  }
  if (file_content) {
    set_has_file_content();
    file_content_ = file_content;
  } else {
    clear_has_file_content();
    file_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pMainLogic

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_v2_2eproto__INCLUDED
