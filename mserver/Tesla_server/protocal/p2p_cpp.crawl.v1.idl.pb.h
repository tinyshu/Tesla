// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2p_cpp.crawl.v1.idl

#ifndef PROTOBUF_p2p_5fcpp_2ecrawl_2ev1_2eidl__INCLUDED
#define PROTOBUF_p2p_5fcpp_2ecrawl_2ev1_2eidl__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace crawl {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_p2p_5fcpp_2ecrawl_2ev1_2eidl();
void protobuf_AssignDesc_p2p_5fcpp_2ecrawl_2ev1_2eidl();
void protobuf_ShutdownFile_p2p_5fcpp_2ecrawl_2ev1_2eidl();

class OneMP3;
class GetMP3ListRequest;
class GetMP3ListResponse;

// ===================================================================

class OneMP3 : public ::google::protobuf::Message {
 public:
  OneMP3();
  virtual ~OneMP3();

  OneMP3(const OneMP3& from);

  inline OneMP3& operator=(const OneMP3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneMP3& default_instance();

  void Swap(OneMP3* other);

  // implements Message ----------------------------------------------

  OneMP3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneMP3& from);
  void MergeFrom(const OneMP3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:crawl.OneMP3)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* title_;
  ::std::string* url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_p2p_5fcpp_2ecrawl_2ev1_2eidl();
  friend void protobuf_AssignDesc_p2p_5fcpp_2ecrawl_2ev1_2eidl();
  friend void protobuf_ShutdownFile_p2p_5fcpp_2ecrawl_2ev1_2eidl();

  void InitAsDefaultInstance();
  static OneMP3* default_instance_;
};
// -------------------------------------------------------------------

class GetMP3ListRequest : public ::google::protobuf::Message {
 public:
  GetMP3ListRequest();
  virtual ~GetMP3ListRequest();

  GetMP3ListRequest(const GetMP3ListRequest& from);

  inline GetMP3ListRequest& operator=(const GetMP3ListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMP3ListRequest& default_instance();

  void Swap(GetMP3ListRequest* other);

  // implements Message ----------------------------------------------

  GetMP3ListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMP3ListRequest& from);
  void MergeFrom(const GetMP3ListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:crawl.GetMP3ListRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_p2p_5fcpp_2ecrawl_2ev1_2eidl();
  friend void protobuf_AssignDesc_p2p_5fcpp_2ecrawl_2ev1_2eidl();
  friend void protobuf_ShutdownFile_p2p_5fcpp_2ecrawl_2ev1_2eidl();

  void InitAsDefaultInstance();
  static GetMP3ListRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetMP3ListResponse : public ::google::protobuf::Message {
 public:
  GetMP3ListResponse();
  virtual ~GetMP3ListResponse();

  GetMP3ListResponse(const GetMP3ListResponse& from);

  inline GetMP3ListResponse& operator=(const GetMP3ListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMP3ListResponse& default_instance();

  void Swap(GetMP3ListResponse* other);

  // implements Message ----------------------------------------------

  GetMP3ListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMP3ListResponse& from);
  void MergeFrom(const GetMP3ListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .crawl.OneMP3 mp3s = 1;
  inline int mp3s_size() const;
  inline void clear_mp3s();
  static const int kMp3SFieldNumber = 1;
  inline const ::crawl::OneMP3& mp3s(int index) const;
  inline ::crawl::OneMP3* mutable_mp3s(int index);
  inline ::crawl::OneMP3* add_mp3s();
  inline const ::google::protobuf::RepeatedPtrField< ::crawl::OneMP3 >&
      mp3s() const;
  inline ::google::protobuf::RepeatedPtrField< ::crawl::OneMP3 >*
      mutable_mp3s();

  // required int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:crawl.GetMP3ListResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::crawl::OneMP3 > mp3s_;
  ::std::string* msg_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_p2p_5fcpp_2ecrawl_2ev1_2eidl();
  friend void protobuf_AssignDesc_p2p_5fcpp_2ecrawl_2ev1_2eidl();
  friend void protobuf_ShutdownFile_p2p_5fcpp_2ecrawl_2ev1_2eidl();

  void InitAsDefaultInstance();
  static GetMP3ListResponse* default_instance_;
};
// ===================================================================

class CrawlService_Stub;

class CrawlService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline CrawlService() {};
 public:
  virtual ~CrawlService();

  typedef CrawlService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetMP3List(::google::protobuf::RpcController* controller,
                       const ::crawl::GetMP3ListRequest* request,
                       ::crawl::GetMP3ListResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CrawlService);
};

class CrawlService_Stub : public CrawlService {
 public:
  CrawlService_Stub(::google::protobuf::RpcChannel* channel);
  CrawlService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~CrawlService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements CrawlService ------------------------------------------

  void GetMP3List(::google::protobuf::RpcController* controller,
                       const ::crawl::GetMP3ListRequest* request,
                       ::crawl::GetMP3ListResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CrawlService_Stub);
};


// ===================================================================


// ===================================================================

// OneMP3

// required string title = 1;
inline bool OneMP3::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneMP3::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneMP3::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneMP3::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& OneMP3::title() const {
  return *title_;
}
inline void OneMP3::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void OneMP3::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void OneMP3::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneMP3::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* OneMP3::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OneMP3::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string url = 2;
inline bool OneMP3::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneMP3::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneMP3::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneMP3::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& OneMP3::url() const {
  return *url_;
}
inline void OneMP3::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void OneMP3::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void OneMP3::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneMP3::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* OneMP3::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OneMP3::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetMP3ListRequest

// required string type = 1;
inline bool GetMP3ListRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMP3ListRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMP3ListRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMP3ListRequest::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& GetMP3ListRequest::type() const {
  return *type_;
}
inline void GetMP3ListRequest::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void GetMP3ListRequest::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void GetMP3ListRequest::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetMP3ListRequest::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* GetMP3ListRequest::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetMP3ListRequest::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetMP3ListResponse

// repeated .crawl.OneMP3 mp3s = 1;
inline int GetMP3ListResponse::mp3s_size() const {
  return mp3s_.size();
}
inline void GetMP3ListResponse::clear_mp3s() {
  mp3s_.Clear();
}
inline const ::crawl::OneMP3& GetMP3ListResponse::mp3s(int index) const {
  return mp3s_.Get(index);
}
inline ::crawl::OneMP3* GetMP3ListResponse::mutable_mp3s(int index) {
  return mp3s_.Mutable(index);
}
inline ::crawl::OneMP3* GetMP3ListResponse::add_mp3s() {
  return mp3s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::crawl::OneMP3 >&
GetMP3ListResponse::mp3s() const {
  return mp3s_;
}
inline ::google::protobuf::RepeatedPtrField< ::crawl::OneMP3 >*
GetMP3ListResponse::mutable_mp3s() {
  return &mp3s_;
}

// required int32 status = 2;
inline bool GetMP3ListResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMP3ListResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMP3ListResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMP3ListResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 GetMP3ListResponse::status() const {
  return status_;
}
inline void GetMP3ListResponse::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required string msg = 3;
inline bool GetMP3ListResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetMP3ListResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetMP3ListResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetMP3ListResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& GetMP3ListResponse::msg() const {
  return *msg_;
}
inline void GetMP3ListResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void GetMP3ListResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void GetMP3ListResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetMP3ListResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* GetMP3ListResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetMP3ListResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace crawl

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_p2p_5fcpp_2ecrawl_2ev1_2eidl__INCLUDED
