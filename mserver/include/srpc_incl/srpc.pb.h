// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srpc.proto

#ifndef PROTOBUF_srpc_2eproto__INCLUDED
#define PROTOBUF_srpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace srpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_srpc_2eproto();
void protobuf_AssignDesc_srpc_2eproto();
void protobuf_ShutdownFile_srpc_2eproto();

class CRpcHead;

// ===================================================================

class CRpcHead : public ::google::protobuf::Message {
 public:
  CRpcHead();
  virtual ~CRpcHead();

  CRpcHead(const CRpcHead& from);

  inline CRpcHead& operator=(const CRpcHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CRpcHead& default_instance();

  void Swap(CRpcHead* other);

  // implements Message ----------------------------------------------

  CRpcHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CRpcHead& from);
  void MergeFrom(const CRpcHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 sequence = 10;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 10;
  inline ::google::protobuf::uint64 sequence() const;
  inline void set_sequence(::google::protobuf::uint64 value);

  // optional uint32 coloring = 20;
  inline bool has_coloring() const;
  inline void clear_coloring();
  static const int kColoringFieldNumber = 20;
  inline ::google::protobuf::uint32 coloring() const;
  inline void set_coloring(::google::protobuf::uint32 value);

  // optional uint64 color_id = 21;
  inline bool has_color_id() const;
  inline void clear_color_id();
  static const int kColorIdFieldNumber = 21;
  inline ::google::protobuf::uint64 color_id() const;
  inline void set_color_id(::google::protobuf::uint64 value);

  // optional uint64 flow_id = 30;
  inline bool has_flow_id() const;
  inline void clear_flow_id();
  static const int kFlowIdFieldNumber = 30;
  inline ::google::protobuf::uint64 flow_id() const;
  inline void set_flow_id(::google::protobuf::uint64 value);

  // optional int32 err = 40;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 40;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // optional int32 result = 41;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 41;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bytes err_msg = 42;
  inline bool has_err_msg() const;
  inline void clear_err_msg();
  static const int kErrMsgFieldNumber = 42;
  inline const ::std::string& err_msg() const;
  inline void set_err_msg(const ::std::string& value);
  inline void set_err_msg(const char* value);
  inline void set_err_msg(const void* value, size_t size);
  inline ::std::string* mutable_err_msg();
  inline ::std::string* release_err_msg();
  inline void set_allocated_err_msg(::std::string* err_msg);

  // optional bytes caller = 50;
  inline bool has_caller() const;
  inline void clear_caller();
  static const int kCallerFieldNumber = 50;
  inline const ::std::string& caller() const;
  inline void set_caller(const ::std::string& value);
  inline void set_caller(const char* value);
  inline void set_caller(const void* value, size_t size);
  inline ::std::string* mutable_caller();
  inline ::std::string* release_caller();
  inline void set_allocated_caller(::std::string* caller);

  // required bytes method_name = 51;
  inline bool has_method_name() const;
  inline void clear_method_name();
  static const int kMethodNameFieldNumber = 51;
  inline const ::std::string& method_name() const;
  inline void set_method_name(const ::std::string& value);
  inline void set_method_name(const char* value);
  inline void set_method_name(const void* value, size_t size);
  inline ::std::string* mutable_method_name();
  inline ::std::string* release_method_name();
  inline void set_allocated_method_name(::std::string* method_name);

  // repeated bytes caller_stack = 60;
  inline int caller_stack_size() const;
  inline void clear_caller_stack();
  static const int kCallerStackFieldNumber = 60;
  inline const ::std::string& caller_stack(int index) const;
  inline ::std::string* mutable_caller_stack(int index);
  inline void set_caller_stack(int index, const ::std::string& value);
  inline void set_caller_stack(int index, const char* value);
  inline void set_caller_stack(int index, const void* value, size_t size);
  inline ::std::string* add_caller_stack();
  inline void add_caller_stack(const ::std::string& value);
  inline void add_caller_stack(const char* value);
  inline void add_caller_stack(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& caller_stack() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_caller_stack();

  // @@protoc_insertion_point(class_scope:srpc.CRpcHead)
 private:
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_coloring();
  inline void clear_has_coloring();
  inline void set_has_color_id();
  inline void clear_has_color_id();
  inline void set_has_flow_id();
  inline void clear_has_flow_id();
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_err_msg();
  inline void clear_has_err_msg();
  inline void set_has_caller();
  inline void clear_has_caller();
  inline void set_has_method_name();
  inline void clear_has_method_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 sequence_;
  ::google::protobuf::uint64 color_id_;
  ::google::protobuf::uint32 coloring_;
  ::google::protobuf::int32 err_;
  ::google::protobuf::uint64 flow_id_;
  ::std::string* err_msg_;
  ::std::string* caller_;
  ::std::string* method_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> caller_stack_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_srpc_2eproto();
  friend void protobuf_AssignDesc_srpc_2eproto();
  friend void protobuf_ShutdownFile_srpc_2eproto();

  void InitAsDefaultInstance();
  static CRpcHead* default_instance_;
};
// ===================================================================


// ===================================================================

// CRpcHead

// required uint64 sequence = 10;
inline bool CRpcHead::has_sequence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CRpcHead::set_has_sequence() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CRpcHead::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CRpcHead::clear_sequence() {
  sequence_ = GOOGLE_ULONGLONG(0);
  clear_has_sequence();
}
inline ::google::protobuf::uint64 CRpcHead::sequence() const {
  return sequence_;
}
inline void CRpcHead::set_sequence(::google::protobuf::uint64 value) {
  set_has_sequence();
  sequence_ = value;
}

// optional uint32 coloring = 20;
inline bool CRpcHead::has_coloring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CRpcHead::set_has_coloring() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CRpcHead::clear_has_coloring() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CRpcHead::clear_coloring() {
  coloring_ = 0u;
  clear_has_coloring();
}
inline ::google::protobuf::uint32 CRpcHead::coloring() const {
  return coloring_;
}
inline void CRpcHead::set_coloring(::google::protobuf::uint32 value) {
  set_has_coloring();
  coloring_ = value;
}

// optional uint64 color_id = 21;
inline bool CRpcHead::has_color_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CRpcHead::set_has_color_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CRpcHead::clear_has_color_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CRpcHead::clear_color_id() {
  color_id_ = GOOGLE_ULONGLONG(0);
  clear_has_color_id();
}
inline ::google::protobuf::uint64 CRpcHead::color_id() const {
  return color_id_;
}
inline void CRpcHead::set_color_id(::google::protobuf::uint64 value) {
  set_has_color_id();
  color_id_ = value;
}

// optional uint64 flow_id = 30;
inline bool CRpcHead::has_flow_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CRpcHead::set_has_flow_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CRpcHead::clear_has_flow_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CRpcHead::clear_flow_id() {
  flow_id_ = GOOGLE_ULONGLONG(0);
  clear_has_flow_id();
}
inline ::google::protobuf::uint64 CRpcHead::flow_id() const {
  return flow_id_;
}
inline void CRpcHead::set_flow_id(::google::protobuf::uint64 value) {
  set_has_flow_id();
  flow_id_ = value;
}

// optional int32 err = 40;
inline bool CRpcHead::has_err() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CRpcHead::set_has_err() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CRpcHead::clear_has_err() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CRpcHead::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 CRpcHead::err() const {
  return err_;
}
inline void CRpcHead::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// optional int32 result = 41;
inline bool CRpcHead::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CRpcHead::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CRpcHead::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CRpcHead::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CRpcHead::result() const {
  return result_;
}
inline void CRpcHead::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional bytes err_msg = 42;
inline bool CRpcHead::has_err_msg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CRpcHead::set_has_err_msg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CRpcHead::clear_has_err_msg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CRpcHead::clear_err_msg() {
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    err_msg_->clear();
  }
  clear_has_err_msg();
}
inline const ::std::string& CRpcHead::err_msg() const {
  return *err_msg_;
}
inline void CRpcHead::set_err_msg(const ::std::string& value) {
  set_has_err_msg();
  if (err_msg_ == &::google::protobuf::internal::kEmptyString) {
    err_msg_ = new ::std::string;
  }
  err_msg_->assign(value);
}
inline void CRpcHead::set_err_msg(const char* value) {
  set_has_err_msg();
  if (err_msg_ == &::google::protobuf::internal::kEmptyString) {
    err_msg_ = new ::std::string;
  }
  err_msg_->assign(value);
}
inline void CRpcHead::set_err_msg(const void* value, size_t size) {
  set_has_err_msg();
  if (err_msg_ == &::google::protobuf::internal::kEmptyString) {
    err_msg_ = new ::std::string;
  }
  err_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CRpcHead::mutable_err_msg() {
  set_has_err_msg();
  if (err_msg_ == &::google::protobuf::internal::kEmptyString) {
    err_msg_ = new ::std::string;
  }
  return err_msg_;
}
inline ::std::string* CRpcHead::release_err_msg() {
  clear_has_err_msg();
  if (err_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = err_msg_;
    err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CRpcHead::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete err_msg_;
  }
  if (err_msg) {
    set_has_err_msg();
    err_msg_ = err_msg;
  } else {
    clear_has_err_msg();
    err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes caller = 50;
inline bool CRpcHead::has_caller() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CRpcHead::set_has_caller() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CRpcHead::clear_has_caller() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CRpcHead::clear_caller() {
  if (caller_ != &::google::protobuf::internal::kEmptyString) {
    caller_->clear();
  }
  clear_has_caller();
}
inline const ::std::string& CRpcHead::caller() const {
  return *caller_;
}
inline void CRpcHead::set_caller(const ::std::string& value) {
  set_has_caller();
  if (caller_ == &::google::protobuf::internal::kEmptyString) {
    caller_ = new ::std::string;
  }
  caller_->assign(value);
}
inline void CRpcHead::set_caller(const char* value) {
  set_has_caller();
  if (caller_ == &::google::protobuf::internal::kEmptyString) {
    caller_ = new ::std::string;
  }
  caller_->assign(value);
}
inline void CRpcHead::set_caller(const void* value, size_t size) {
  set_has_caller();
  if (caller_ == &::google::protobuf::internal::kEmptyString) {
    caller_ = new ::std::string;
  }
  caller_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CRpcHead::mutable_caller() {
  set_has_caller();
  if (caller_ == &::google::protobuf::internal::kEmptyString) {
    caller_ = new ::std::string;
  }
  return caller_;
}
inline ::std::string* CRpcHead::release_caller() {
  clear_has_caller();
  if (caller_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = caller_;
    caller_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CRpcHead::set_allocated_caller(::std::string* caller) {
  if (caller_ != &::google::protobuf::internal::kEmptyString) {
    delete caller_;
  }
  if (caller) {
    set_has_caller();
    caller_ = caller;
  } else {
    clear_has_caller();
    caller_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes method_name = 51;
inline bool CRpcHead::has_method_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CRpcHead::set_has_method_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CRpcHead::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CRpcHead::clear_method_name() {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    method_name_->clear();
  }
  clear_has_method_name();
}
inline const ::std::string& CRpcHead::method_name() const {
  return *method_name_;
}
inline void CRpcHead::set_method_name(const ::std::string& value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void CRpcHead::set_method_name(const char* value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void CRpcHead::set_method_name(const void* value, size_t size) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CRpcHead::mutable_method_name() {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  return method_name_;
}
inline ::std::string* CRpcHead::release_method_name() {
  clear_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_name_;
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CRpcHead::set_allocated_method_name(::std::string* method_name) {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_name_;
  }
  if (method_name) {
    set_has_method_name();
    method_name_ = method_name;
  } else {
    clear_has_method_name();
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated bytes caller_stack = 60;
inline int CRpcHead::caller_stack_size() const {
  return caller_stack_.size();
}
inline void CRpcHead::clear_caller_stack() {
  caller_stack_.Clear();
}
inline const ::std::string& CRpcHead::caller_stack(int index) const {
  return caller_stack_.Get(index);
}
inline ::std::string* CRpcHead::mutable_caller_stack(int index) {
  return caller_stack_.Mutable(index);
}
inline void CRpcHead::set_caller_stack(int index, const ::std::string& value) {
  caller_stack_.Mutable(index)->assign(value);
}
inline void CRpcHead::set_caller_stack(int index, const char* value) {
  caller_stack_.Mutable(index)->assign(value);
}
inline void CRpcHead::set_caller_stack(int index, const void* value, size_t size) {
  caller_stack_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CRpcHead::add_caller_stack() {
  return caller_stack_.Add();
}
inline void CRpcHead::add_caller_stack(const ::std::string& value) {
  caller_stack_.Add()->assign(value);
}
inline void CRpcHead::add_caller_stack(const char* value) {
  caller_stack_.Add()->assign(value);
}
inline void CRpcHead::add_caller_stack(const void* value, size_t size) {
  caller_stack_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CRpcHead::caller_stack() const {
  return caller_stack_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CRpcHead::mutable_caller_stack() {
  return &caller_stack_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace srpc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_srpc_2eproto__INCLUDED
